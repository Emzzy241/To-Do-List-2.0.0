@{
  Layout = "_Layout";
}

@model ToDoList.Models.Category;
@using ToDoList.Models;
@using System.Collections.Generic;

<h2>Category Details</h2>
<hr />
<h3>@Html.DisplayNameFor(model => model.Name): @Html.DisplayFor(model => model.Name)<h3>

@if (@Model.Items.Count == 0)
{
  <h3>No items have been added to this category yet!</h3>
} 
else
{
  <h4>Items the category contains: </h4>
  <ul>
    @foreach (Item item in Model.Items)
    {
        // we want to update not just the items but also the tags that belong to each item. To achieve this, we'll need a loop within a loop and some additional code to format our tags to display inline
        string tags = "";
        @if(item.JoinEntities.Count == 0)
        {
            tags = "This item does not have any tags.";
        }
        else{
          List<string> tagList = new List<string>();
          @foreach(ItemTag join in item.JoinEntities)
          {
            tagList.Add(join.Tag.Title);
          }
          tags = String.Join(", ", tagList);
        }
        <li>@item.Description | Tags: @tags</li>
    }
  </ul>
}

<p>@Html.ActionLink("Add Item", "Create","Items")</p>
<p>@Html.ActionLink("Edit Category", "Edit", new { id = Model.CategoryId })</p>
<p>@Html.ActionLink("Delete Category", "Delete", new { id = Model.CategoryId })</p>
<p>@Html.ActionLink("Back to list", "Index")</p>